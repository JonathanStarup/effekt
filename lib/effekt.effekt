module effekt

// Runtime
extern include "effekt_runtime.js"

// Builtins
extern include "effekt_builtins.js"

// Pattern Matching
extern include "effekt_matching.js"

def locally[R] { f: () => R }: R { f() }

// Side effecting ops
// ==================
extern def println[R](value: R): Unit =
  "println$impl(value)"

extern pure def inspect[R](value: R): Unit =
  "console.log(value)"

extern pure def random(): Double =
  "Math.random()"


// String ops
// ==========
extern pure def show[R](value: R): String =
  "show$impl(value)"

extern pure def infixConcat(s1: String, s2: String): String =
  "s1 + s2"

// Math ops
// ========
extern pure def infixAdd(x: Int, y: Int): Int =
  "(x + y)"

extern pure def infixMul(x: Int, y: Int): Int =
  "(x * y)"

extern pure def infixDiv(x: Int, y: Int): Int =
  "Math.floor(x / y)"

extern pure def infixSub(x: Int, y: Int): Int =
  "(x - y)"

extern pure def mod(x: Int, y: Int): Int =
  "(x % y)"

// extern pure def infixAdd(x: Double, y: Double): Double =
//   "(x + y)"

// extern pure def infixMul(x: Double, y: Double): Double =
//   "(x * y)"

// extern pure def infixSub(x: Double, y: Double): Double =
//   "(x - y)"

// extern pure def infixDiv(x: Double, y: Double): Double =
//   "(x / y)"


extern pure def cos(x: Double): Double =
  "Math.cos(x)"

extern pure def sin(x: Double): Double =
  "Math.sin(x)"

extern pure def atan(x: Double): Double =
  "Math.atan(x)"

extern pure def tan(x: Double): Double =
  "Math.tan(x)"

extern pure def sqrt(x: Double): Double =
  "Math.sqrt(x)"

extern pure def square(x: Double): Double =
  "(x * x)"

extern pure def log(x: Double): Double =
  "Math.log(x)"

extern pure def log1p(x: Double): Double =
  "Math.log1p(x)"

extern pure def exp(x: Double): Double =
  "Math.exp(x)"

// since we do not have "extern val", yet
extern pure def _pi(): Double =
  "Math.PI"

extern pure def toInt(d: Double): Int =
  "Math.round(d)"

extern pure def toDouble(d: Int): Double =
  "d"


// Comparison ops
// ==============
extern pure def infixEq[R](x: R, y: R): Boolean =
  "equals$impl(x, y)"

extern pure def infixNeq[R](x: R, y: R): Boolean =
  "!equals$impl(x, y)"

extern pure def infixLt(x: Int, y: Int): Boolean =
  "x < y"

extern pure def infixLte(x: Int, y: Int): Boolean =
  "x <= y"

extern pure def infixGt(x: Int, y: Int): Boolean =
  "x > y"

extern pure def infixGte(x: Int, y: Int): Boolean =
  "x >= y"

// extern pure def infixLt(x: Double, y: Double): Boolean =
//   "x < y"

// extern pure def infixLte(x: Double, y: Double): Boolean =
//   "x <= y"

// extern pure def infixGt(x: Double, y: Double): Boolean =
//   "x > y"

// extern pure def infixGte(x: Double, y: Double): Boolean =
//   "x >= y"

// Boolean ops
// ===========
// for now those are considered eager
extern pure def not(b: Boolean): Boolean =
  "!b"

extern pure def infixOr(x: Boolean, y: Boolean): Boolean =
  "x || y"

extern pure def infixAnd(x: Boolean, y: Boolean): Boolean =
  "x && y"

// Undefined and Null
// ==================
// Should only be used for interop with JS, since values in Effekt should not be undefined

// Is something an undefined JavaScript value?
extern pure def isUndefined[A](value: A): Boolean =
  "value === undefined"

// Is something a JavaScript null value?
extern pure def isNull[A](value: A): Boolean =
  "value === null"

// Exceptions
// ==========
// a fatal runtime error that cannot be caught
extern pure def panic[R](msg: String): R =
  "(function() { throw msg })()"

interface Exception[E] {
  def raise[A](exception: E, msg: String): A
}
type RuntimeError { RuntimeError() }

def raise[A](msg: String) { e: Exception[RuntimeError] }: A {
  e.raise(RuntimeError(), msg)
}
// converts exceptions of (static) type E to an uncatchable panic that aborts the program
def panicOn[E] { prog: {Exception[E]} => Unit }: Unit {
  try { prog { exc } } with exc : Exception[E] {
    def raise[A](exception: E, msg: String) { panic(msg) }
  }
}

// reports exceptions of (static) type E to the console
def report[E] { prog: {Exception[E]} => Unit }: Unit {
  try { prog { exc } } with exc : Exception[E] {
    def raise[A](exception: E, msg: String) { println(msg) }
  }
}

// ignores exceptions of (static) type E
// TODO this should be called "ignore" but that name currently clashes with internal pattern matching names on $effekt
def ignoring[E] { prog: {Exception[E]} => Unit }: Unit {
  try { prog { exc } } with exc : Exception[E] {
    def raise[A](exception: E, msg: String) { () }
  }
}

// Benchmarking
// ============

// Current time in nanoseconds
// TODO use a better timer
extern def currentTimeNanos(): Int =
  "$effekt.delayed(() => new Date().getTime() * 1000)"
