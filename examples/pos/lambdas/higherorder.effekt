module examples/pos/lambdas/higherorder

effect Yield(): Unit

def repeater { f: Unit }: (Int) => Int / {f} = {
  def rec(n: Int): Int = if (n == 0) { f(); n } else rec(n - 1)
  fun(n: Int) { rec(n) }
}

def main() =
  try {
    val g = repeater { do Yield(); println("hello") };
    g(1)
  } with Yield { println("yielded"); resume(()) }