effect Yield(n: Int): Unit

type Result {
  Next(n: Int);
  Done()
}

def numbers() = {
  Yield(1);
  Yield(2);
  Yield(3)
}

def main() = {

  var generator: () => Result / {main} = fun() { Done() }

  try {
    numbers()
    generator = fun() { Done() }
  } with Yield { n =>
    generator = fun() { resume(()); Next(n) }
  }

  println(generator())
  println(generator())
  println(generator())
  println(generator())
  println(generator())
}