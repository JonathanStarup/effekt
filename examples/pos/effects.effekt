module examples/pos/effects

interface Test1 {
  def get1(b: Boolean): Int
}

interface Test2 {
  def get2(): Int
}

def foo { test : Test1 }: Unit = {
  println(test.get1(true) + 1);
  try {
    test2.get2() + 1
  } with test2 : Test2 {
    def get2() = resume(42)
  };
  foo { test }

}

def user { t: Test2 } = t.get2() + 1

def bar(): Int = {
  try {
    user { test2 }
  } with test2 : Test2 {
    def get2() = resume(10) * resume(3)
  }
}

interface State {
  def get(): Int
  def put(b: Int): Unit
}

def state[R](init: Int) { prog: { State } => R }: R = {
  val f = try {
    val result = prog { st }
    box { (s: Int) => result }
  } with st : State {
    def get() = box { (s: Int) => (unbox resume(s))(s) }
    def put(b: Int) = box { (s: Int) => (unbox resume(()))(b) }
  };
  (unbox f)(init)
}

// def bar { test : Test2 } = foo { test }

def main() = println(bar())
